<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop 
	   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
<!-- 配置包扫描 -->
<context:component-scan base-package="m05.d28.com.dt59"/>



<!-- 配置数据源 -->
<!-- <bean id="basicDataSource"  class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
	<property name="username" value="Qbaba"/>
	<property name="password" value="aishinihewo"/>
</bean> -->
<bean id="basicDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <!--通过jndiName指定引用的JNDI数据源名称 -->
        <property name="jndiName">
            <value>java:comp/env/myorcl</value>
        </property>
	</bean>
<!-- 扫描书写sql语句的配置 -->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- 指定数据源 -->
	<property name="dataSource" ref="basicDataSource"/>
	<!-- 指定书写sql语句xml文件的路径 -->
	<property name="mapperLocations" value="classpath*:m05/d28/com/dt59/mapper/*.xml"/>
</bean>
<!-- 扫描dao类 -->
<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="m05.d28.com.dt59.mapper"/>
</bean>

<!--alibaba 连接池 配置数据源-->  
  <!--   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        基本属性 url、user、password  
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql:///lll" />  
        <property name="username" value="root" />  
        <property name="password" value="123456" />  
        配置初始化大小、最小、最大  
        <property name="initialSize" value="1" />  
        <property name="minIdle" value="1" />  
        <property name="maxActive" value="20" />  
        配置获取连接等待超时的时间  
        <property name="maxWait" value="60000" />  
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        配置一个连接在池中最小生存的时间，单位是毫秒  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        property name="validationQuery" value="SELECT 'x'" /  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="true" />  
        <property name="testOnReturn" value="true" />  
        打开PSCache，并且指定每个连接上PSCache的大小  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
        配置监控统计拦截的filters  
        <property name="filters" value="stat" />  
    </bean>  
 -->
 <!--hibernate 配置 创建HibernateSessionFactory-->  
    <!-- <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        数据库信息  
        <property name="hibernatedataSource" ref="dataSource"/>  
        <property name="mappingLocations">装配entity  
            <list>entity是根据数据库表使用idea生成的  
                <value>classpath:m05/d31/com/dt59/ojpo/Customer.hbm.xml</value>
            </list>  
        </property>  
        hibernate 配置设置  
        <property name="hibernateProperties">  
            <props>  
                数据库方言  
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>  
                更新表结构  
                    create：表示启动的时候先drop，再create  
                    create-drop: 也表示创建，只不过再系统关闭前执行一下drop  
                    update: 这个操作启动的时候会去检查schema是否一致，如果不一致会做scheme更新  
                    validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新  
                 
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
                是否显示sql  
                <prop key="hibernate.show_sql">true</prop>  
                是否格式化sql  
                <prop key="hibernate.format_sql">true</prop>  
            </props>  
        </property>  
    </bean>   -->
    <!--二次封装的hibernate的dao-->  
   <!--  <bean id="hibernateDao" class="m05.d31.com.dt59.test.Demo">  
        <property name="sessionFactory" ref="hibernateSessionFactory"/>  
    </bean>  --> 

	<!-- <tx:annotation-driven transaction-manager=""/> -->
<!--目标类-->
<!-- <bean id="mobiDaoImpl" class="m05.d23.Qbaba.aop.MobiDaoImpl"/>
切面类
<bean id="gC" class="m05.d23.Qbaba.aop.GC"/>
<bean id="logging" class="m05.d23.Qbaba.aop.Logging"/>
<bean id="security" class="m05.d23.Qbaba.aop.Security"/>
<bean id="global" class="m05.d23.Qbaba.aop.Global"/>
<bean id="auth" class="m05.d23.Qbaba.aop.Auth"/>
配置AOP	
<aop:config>
	配置切入点 
	 expression:切入点表达式
	
	<aop:pointcut expression="execution(* m05.d23.Qbaba.aop.MobiDaoImpl.*(..))" id="mdl"/>
	配置切面
	ref:指定切面所在类
	
	 <aop:aspect ref="auth">
	 	<aop:around method="isLogin" pointcut-ref="mdl"/>
	 </aop:aspect>
	<aop:aspect ref="security">
		配置通知 
			method:通知的名字
			pointcut-ref:切入点  before:前切 after:后切
		
	 	<aop:before method="anquan" pointcut-ref="mdl"/>
	</aop:aspect>
	<aop:aspect ref="gC">
	 	<aop:after method="clean" pointcut-ref="mdl"/>	 	
	</aop:aspect>
	<aop:aspect ref="logging">
	 	<aop:after-returning method="logging" pointcut-ref="mdl" returning="str"/>	 	
	</aop:aspect>
	<aop:aspect ref="global">
		<aop:after-throwing method="handAllException" pointcut-ref="mdl" throwing="ex"/>
	</aop:aspect>
</aop:config> -->
	<!-- <context:component-scan base-package="m05.d23.Qbaba"/> -->
<!-- bean :将某一个类交给spring容器来管理,那么这个类就是一个beam类
			id：为指定beng类取一个唯一标识符
			class：包路径
			scope：常用
			request：一次请求后销毁 
			session ：一次会话后销毁
			默认单例： singleton
			 多例：prototype
			lazy-init:true ：使用时才创建 节省内寸资源
		 -->
		<!--  <bean id="role" class="m04.d11.entity.Role">
		 <property name="admin" value="超级管理员"/>
		 <property name="vip" value="会员"/>
		 <property name="user" value="普通用户"/>
		 </bean>
		<bean id="user" class="m04.d11.entity.User"  scope="singleton"  lazy-init="true">
		<property name="newsId" value="2"/>
		<property name="newsAuthor" value="Qbaba"/>
		<property name="Role" ref="role"/>
		<property name="lists">
			<list>
				<ref bean="role"/>
			</list>
		</property>
		<property name="sets">
			<set>
			  <value>小高总</value>
			</set>
		</property>
		<property name="maps">
			<map>
				<entry key="username" value="Qbaba"/>
				<entry key="password" value="aishinihewo"/>
			</map>
		</property>
		<property name="props">
			<props>
				<prop key="driver">oracle.jdbc.driver.OracleDriver</prop>
				<prop key="url">jdbc:oracle:thin:@localhost:1521:orcl</prop>
				<prop key="username">Qbaba</prop>
				<prop key="password">aishinihewo</prop>
			</props>
		</property>
		</bean> 
		通过构造方法进行依赖注入
		 <bean id="person" class="m04.d11.entity.Person">
			<constructor-arg index="0" type="java.lang.String" value="Qbaba" />
			<constructor-arg index="1" type="java.lang.String" value="piapiapia" />
			<constructor-arg index="2" type="java.lang.Integer" value="21" />
			<constructor-arg index="3" type="java.lang.Char" value="男" />
		</bean>  -->	
</beans>
